language: python
python:
  - 3.5
  - 3.6
  - 3.7
  - 3.8

stages:
  - Build and Test
#   - test
#   # Only execute deployment stage on tagged commits, and from your repository
#   # (e.g. not PRs). Replace with your repo name.
#   - deploy

env:
  global:
    # Python 2.7 is not supported
    - CIBW_SKIP="cp27-* pp27-*"
    # Install dev dependencies before testing
    - CIBW_BEFORE_TEST="pip install -r dev_requirements.txt"
    # Test command
    - CIBW_TEST_COMMAND="pytest {project}/tests"


jobs:
  include:
    - stage: Build and Test
    # Perform a linux build on all archs [x86_64, i686, pypy_x86_64, aarch64, ppc64le, s390x]
    - services: docker
      name: Build Linux wheels
    # Mac build
    - os: osx
      language: shell
    # Windows build
    - os: windows
      language: shell
      before_install:
        - choco install python --version 3.8.0
        - export PATH="/c/Python38:/c/Python38/Scripts:$PATH"
        # make sure it's on PATH as 'python3'
        - ln -s /c/Python38/python.exe /c/Python38/python3.exe
    

install:
  - python3 -m pip install cibuildwheel>=1.4.1

script:
  # build the wheels, put them into './wheelhouse'
  - python3 -m cibuildwheel --output-dir wheelhouse

after_success:
  # if the release was tagged, upload them to PyPI
  - |
    echo "WE MADE IT HERE!!!!"

# after_success:
#   # if the release was tagged, upload them to PyPI
#   - |
#     if [[ $TRAVIS_TAG ]]; then
#       python3 -m pip install twine
#       python3 -m twine upload wheelhouse/*.whl
#     fi


# language: python
# python:
#   - 3.5
#   - 3.6
#   - 3.7
#   - 3.8

# jobs:
#   include:
#   # Deploy source distribution
#     - stage: deploy
#       name: Deploy source distribution
#       install: skip
#       script: python3 setup.py sdist --formats=gztar
#     # perform a linux build
#     - services: docker
#       name: Build Linux wheels
#     # perform a linux ARMv8 build
#     - services: docker
#       name: Build and deploy Linux wheels
#       arch: arm64
#     # perform a linux PPC64LE build
#     - services: docker
#       name: Build and deploy Linux wheels
#       arch: ppc64le
#     # perform a linux S390X build
#     - services: docker
#       name: Build and deploy Linux wheels
#       arch: s390x
#     # and a mac build
#     - os: osx
#       name: Build and deploy macOS wheels
#       language: shell
#     # and a windows build
#     - os: windows
#       name: Build and deploy Windows wheels
#       language: shell
#       before_install:
#         - choco install python --version 3.8.0
#         - export PATH="/c/Python38:/c/Python38/Scripts:$PATH"
#         # make sure it's on PATH as 'python3'
#         - ln -s /c/Python38/python.exe /c/Python38/python3.exe

# language: python
# python:
#   - 3.5
#   - 3.6
#   - 3.7
#   - 3.8

# before_install:
#   - |
#     if [[ "$TRAVIS_OS_NAME" = windows ]]; then
#         choco install python --version 3.8.0
#         export PATH="/c/Python38:/c/Python38/Scripts:$PATH"
#         # make sure it's on PATH as 'python3'
#         ln -s /c/Python38/python.exe /c/Python38/python3.exe
#     fi
# install:
#   - python3 -m pip install pytest

# script:
#   - pip install .
#   - pip install -r dev_requirements.txt
#   - pytest tests

# stages:
#   - test
#   # Only execute deployment stage on tagged commits, and from your repository
#   # (e.g. not PRs). Replace with your repo name.
#   - deploy
#   # - name: deploy
#     # if: tag IS PRESENT AND repo = joerick/cibuildwheel
#     # To only build tags that look like vX.Y.Z:
#     #   if: tag =~ ^v\d+\.\d+\.\d+$ AND repo = joerick/cibuildwheel

# jobs:
#   include:
#     # Optional: run a test on Windows
#     - os: windows
#       language: shell
#       name: Test on Windows
#     # Deploy source distribution
#     - stage: deploy
#       name: Deploy source distribution
#       install: skip
#       script: python3 setup.py sdist --formats=gztar
#       # after_success: |
#       #   python3 -m pip install twine
#       #   python3 -m twine upload --skip-existing dist/*.tar.gz
#     # Deploy on linux
#     - stage: deploy
#       name: Build and deploy Linux wheels
#       services: docker
#       install: python3 -m pip install cibuildwheel==1.6.4
#       script: python3 -m cibuildwheel --output-dir wheelhouse
#       # after_success: |
#       #   python3 -m pip install twine
#       #   python3 -m twine upload --skip-existing wheelhouse/*.whl
#     # Deploy on linux arm64
#     - stage: deploy
#       name: Build and deploy Linux wheels
#       arch: arm64
#       services: docker
#       install: python3 -m pip install cibuildwheel==1.6.4
#       script: python3 -m cibuildwheel --output-dir wheelhouse
#       # after_success: |
#       #   python3 -m pip install twine
#       #   python3 -m twine upload --skip-existing wheelhouse/*.whl
#     # Deploy on linux ppc64le
#     - stage: deploy
#       name: Build and deploy Linux wheels
#       arch: ppc64le
#       services: docker
#       install: python3 -m pip install cibuildwheel==1.6.4
#       script: python3 -m cibuildwheel --output-dir wheelhouse
#       # after_success: |
#       #   python3 -m pip install twine
#       #   python3 -m twine upload --skip-existing wheelhouse/*.whl
#     # Deploy on linux s390x
#     - stage: deploy
#       name: Build and deploy Linux wheels
#       arch: s390x
#       services: docker
#       install: python3 -m pip install cibuildwheel==1.6.4
#       script: python3 -m cibuildwheel --output-dir wheelhouse
#       # after_success: |
#       #   python3 -m pip install twine
#       #   python3 -m twine upload --skip-existing wheelhouse/*.whl
#     # Deploy on mac
#     - stage: deploy
#       name: Build and deploy macOS wheels
#       os: osx
#       language: shell
#       install: python3 -m pip install cibuildwheel==1.6.4
#       script: python3 -m cibuildwheel --output-dir wheelhouse
#       # after_success: |
#       #   python3 -m pip install twine
#       #   python3 -m twine upload --skip-existing wheelhouse/*.whl
#     # Deploy on windows
#     - stage: deploy
#       name: Build and deploy Windows wheels
#       os: windows
#       language: shell
#       install: python3 -m pip install cibuildwheel==1.6.4
#       script: python3 -m cibuildwheel --output-dir wheelhouse
#       # after_success: |
#       #   python3 -m pip install twine
#       #   python3 -m twine upload --skip-existing wheelhouse/*.whl

# env:
#   global:
#     # Python 2.7 is not supported
#     - CIBW_SKIP="cp27-* pp27-*"

# after_success:
#   # if the release was tagged, upload them to PyPI
#   - |
#     echo "WE MADE IT HERE!!!!!"